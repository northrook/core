<?php

namespace Northrook\Core\Cache;

use Northrook\Core\Debug\Timestamp;
use Northrook\Logger\Log;
use Symfony\Component\Filesystem\Exception\IOException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;
use Symfony\Component\VarExporter\Exception\ExceptionInterface;
use Symfony\Component\VarExporter\VarExporter;

final class ManifestCache
{
    private readonly mixed $manifest;

    public function __construct(
        private readonly string $name = 'manifest',
        private ?string         $cachePath = null,
        private readonly bool   $canGenerate = true,
    ) {
        $this->cachePath = Path::normalize( $cachePath ?? sys_get_temp_dir() );

        if ( !is_dir( $this->cachePath ) ) {
            throw new \InvalidArgumentException( "Provided cache path $this->cachePath is not a valid directory." );
        }

        $this->cachePath .= '/' . $this->name . '.manifest';
    }

    public static function hash( mixed $manifest ) : string {
        return strtoupper( hash( 'xxh128', print_r( $manifest, true ), false ) );
    }

    public function set( mixed $manifest ) : bool {

        if ( !$this->canGenerate ) {
            throw new \RuntimeException( "Manifest generation is disabled by the constructor." );
        }

        $hash     = ManifestCache::hash( $manifest );
        $datetime = new Timestamp();

        $generator = $this::class;
        $generated = $datetime->format();

        try {
            $manifest = VarExporter::export(
                [
                    'name'      => $this->name,
                    'hash'      => $hash,
                    'timestamp' => $datetime->timestamp,
                    'manifest'  => $manifest,
                ],
            );
        }
        catch ( ExceptionInterface $exception ) {
            throw new \InvalidArgumentException(
                message  : "Unable to export the $this->name manifest.",
                code     : 500,
                previous : $exception,
            );
        }

        $content = <<<PHP
            <?php // $hash

            /*---------------------------------------------------------------------
            
                Name:      $this->name
                Timestamp: $generated
                Generator: $generator

                This file is automatically generated by ManifestCache.

                Do not edit it manually.

                See https://github.com/northrook/core for more information.

            ---------------------------------------------------------------------*/

            return $manifest;
            PHP;

        try {
            ( new Filesystem() )->dumpFile( $this->cachePath, $content );
        }
        catch ( IOException $IOException ) {
            Log::Error(
                'Unable to update the asset manifest.',
                [
                    'path'     => $this->cachePath,
                    'message'  => $IOException->getMessage(),
                    'code'     => $IOException->getCode(),
                    'previous' => $IOException->getPrevious(),
                ],
            );

            return false;
        }
        return true;
    }

    public function get(
        mixed $fallback = null,
        bool  $validate = true,
        bool  $returnRaw = false,
    ) : mixed {

        if ( $returnRaw ) {
            return $this->loadManifest( $this->cachePath );
        }

        if ( isset( $this->manifest ) ) {
            return $this->manifest;
        }

        $manifestData = $this->loadManifest( $this->cachePath );

        if ( $validate && $this->validate( $manifestData ) === false ) {
            throw new \RuntimeException(
                "Manifest $this->name is invalid.\n\nHash mismatch.\n\nPlease regenerate the manifest.\n\n$this->cachePath",
            );
        }

        return $this->manifest = $manifestData[ 'manifest' ];
    }

    private function loadManifest( string $path ) : mixed {
        return file_exists( $path ) ? require $path : null;
    }

    private function validate( mixed $manifestData ) : bool {
        return $manifestData[ 'hash' ] === ManifestCache::hash( $manifestData[ 'manifest' ] ) . ' ?';
    }
}